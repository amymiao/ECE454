Optimization 1: Adding threads. Horizontally divide up the board
128: Time 2.19, Speedup 1.3972602739726
512: Time 11.33, Speedup 4.28067078552515
1k: Time 45.66, Speedup 4.38020148926851

Optimization 2: Flipping loops (cache optimization). Horizontally move through the board, row by row
128: Time 0.80, Speedup 3.825
512: Time 9.30, Speedup 5.21505376344086
1k: Time 35.37, Speedup 5.65450947130337

Optimization 3: Optimizing mod function by simplifying it.
128: Time 0.53, Speedup 5.77358490566038
512: Time 6.30, Speedup 7.6984126984127
1k: Time 23.73, Speedup 8.42815002107037

Optimization 4: Optimizing BOARD with 1 less pointer access and LICM:
128: Time 0.51, Speedup 6
512: Time 6.20, Speedup 7.82258064516129
1k: Time 23.23, Speedup 8.6095566078347

Optimization 5: Optimizing alivep by replacing it with simple if-else:
128: Time 0.47, Speedup 6.51063829787234
512: Time 6.05, Speedup 8.01652892561983
1k: Time 22.95, Speedup 8.71459694989107

Optimization 6: Reducing computation of neighbor_count, by eliminating duplicate computation
128: Time 0.50, Speedup 6.12
512: Time 5.90, Speedup 8.22
1k: Time 22.27, Speedup 8.98

Optimization 7: Moved inner loop to an inline function which helped the compiler expose optimizations
128: Time 0.52, Speedup 5.88
512: Time 5.75, Speedup 8.43
1k: Time 21.98, Speedup 9.10


Optimization 8: Removing else from alivep. Gcc didn't optimize this.
128: Time 0.50, Speedup 6.12
512: Time 5.80, Speedup 8.36
1k: Time 21.80, Speedup 9.17
